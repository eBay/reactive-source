#!/bin/bash

#=======================================================
# Copyright (c) 2013-2014 eBay Software Foundation
#
# See the file license.txt for copying permission.
#======================================================= 

setup_notifications () {
  # load create_notify_with_json source
  local DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

  . "$DIR/create_notify_with_json" --source-only
  . "$DIR/utils" --source-only

  local SERVER=$1
  local PORT=$2
  local DATABASE=$3
  local USERNAME=$4
  local TABLE_NAME=$5
  local STREAM_NAME=$6
  local TRIGGER_NAME="$TABLE_NAME"_"$STREAM_NAME"

  #make sure 'notify_with_json()' procedure is there
  create_notify_with_json $SERVER $PORT $DATABASE $USERNAME
  verifyLastCommand "FAILURE! The notify_with_json() was not installed. Make sure you provided the correct parameters."

  #drop old trigger for this table/stream if any exists
  psql -h $SERVER -p $PORT -U $USERNAME -d $DATABASE -c \
    "DROP TRIGGER IF EXISTS $TRIGGER_NAME ON $TABLE_NAME"
  verifyLastCommand "FAILURE! Couldnt drop old trigger."

  #setup a new trigger that calls the notify_with_json() procedure
  psql -h $SERVER -p $PORT -U $USERNAME -d $DATABASE -c \
    "CREATE TRIGGER $TRIGGER_NAME AFTER INSERT OR UPDATE OR DELETE ON $TABLE_NAME FOR EACH ROW EXECUTE PROCEDURE notify_with_json('$STREAM_NAME')"
  verifyLastCommand "FAILURE! The trigger was not setup for table[$TABLE_NAME] and stream[$STREAM_NAME]. Check your parameters and try again."

  echo "Created trigger for table [$TABLE_NAME] which fires events in stream [$STREAM_NAME]."
  echo "Trigger name ($TRIGGER_NAME)"
}

show_message () {
  local SERVER=$1
  local PORT=$2
  local DATABASE=$3
  local USERNAME=$4
  local TABLE_NAME=$5
  local STREAM_NAME=$6
  local TRIGGER_NAME=$7
  local answer

cat << EOF
-----------------------------------------------------------------------
This script will setup a trigger with name "$TRIGGER_NAME" for the
table "$TABLE_NAME". Every time there is a change in this table a
notification will be created and pushed to the stream "$STREAM_NAME"
as you specified.

You have selected the following connection parameters:
SERVER:       "$SERVER:$PORT"
DATABASE:     "$DATABASE"
USERNAME:     "$USERNAME"
TABLE_NAME:   "$TABLE_NAME"
TRIGGER_NAME: "$TRIGGER_NAME"
-----------------------------------------------------------------------
EOF
  
  echo -n "Do you want to proceed(y/n)? [Default is y]: "
  read answer

  if [[ $answer == "n" ]]; then
    exit 0
  fi
}

# Call only if --source-only parameter is not set.
# Used for making it possible to load this file only for using its function
if [ "${1}" != "--source-only" ]; then

  # load utils
  . "$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )/utils"

  readConnectionParams "$@"
  if [ $? -ne 0 ]; then
    usage_notifications
    exit 1
  fi

  readTableAndStreamParams "$@"
  if [ $? -ne 0 ]; then
    usage_notifications
    exit 1
  fi

  show_message $SERVER $PORT $DATABASE $USERNAME $TABLE_NAME $STREAM_NAME "$TABLE_NAME"_"$STREAM_NAME"

  # call create stream
  setup_notifications $SERVER $PORT $DATABASE $USERNAME $TABLE_NAME $STREAM_NAME
fi
